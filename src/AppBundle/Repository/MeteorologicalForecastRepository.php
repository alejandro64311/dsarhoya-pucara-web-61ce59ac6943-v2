<?php

namespace AppBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use AppBundle\Repository\Options\MeteorologicalForecastOption;

/**
 * MeteorologicalForecastRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeteorologicalForecastRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $optionsArray
     *
     * @return array|null
     */
    public function meteorologicalForecasts(array $optionsArray)
    {
        return $this->meteorologicalForecastsQueryBulder($optionsArray)->getQuery()->getResult();
    }

    /**
     * @param array $optionsArray
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function meteorologicalForecastsQueryBulder(array $optionsArray): QueryBuilder
    {
        $options = new MeteorologicalForecastOption($optionsArray);
        $qb = $this->createQueryBuilder('mf');

        $qb->andWhere($qb->expr()->eq('mf.mine', ':mine'))->setParameter('mine', $options->getMine());

        /** @var \DateTime $begin */
        $begin = clone $options->getDate();
        $begin->setTime(0, 0, 0);

        // /** @var \DateTime $end */
        // $end = clone $options->getDate();
        // $end = null !== $options->getInterval() ? $end->add($options->getInterval()) : $end->add(new \DateInterval('P10D'));
        // $end->setTime(23, 59, 59);
        // $qb->andWhere($qb->expr()->between('mf.emissionDate', ':begin', ':end'))
        //     ->setParameter('begin', $begin)
        //     ->setParameter('end', $end);

        $qb->andWhere($qb->expr()->gte('mf.dateObject', ':date'))->setParameter('date', $begin);

        if (null !== $options->getPlace()) {
            $qb->andWhere($qb->expr()->eq('mf.place', ':place'))->setParameter('place', $options->getPlace());
        }

        if (is_array($options->getOrderBy())) {
            foreach ($options->getOrderBy() as $field => $direction) {
                $qb->addOrderBy($field, $direction);
            }
        } else {
            $qb
                ->orderBy('mf.place', 'asc')
                ->addOrderBy('mf.dateObject', 'asc');
        }

        if (null !== $options->getLimit()) {
            $qb->getMaxResults($options->getLimit());
        }

        return $qb;
    }
}
