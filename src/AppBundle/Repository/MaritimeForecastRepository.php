<?php

namespace AppBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use AppBundle\Repository\Options\SearchOption;

/**
 * MaritimeForecastRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaritimeForecastRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $optionsArray
     *
     * @return array|null
     */
    public function maritimeForecasts(array $optionsArray)
    {
        return $this->maritimeForecastsQueryBulder($optionsArray)->getQuery()->getResult();
    }

    /**
     * @param array $optionsArray
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function maritimeForecastsQueryBulder(array $optionsArray): QueryBuilder
    {
        $options = new SearchOption($optionsArray);
        $qb = $this->createQueryBuilder('maf');


        // /** @var \DateTime $end */
        // $end = clone $options->getDate();
        // $end = null !== $options->getInterval() ? $end->add($options->getInterval()) : $end->add(new \DateInterval('P10D'));
        // $end->setTime(23, 59, 59);
        // $qb->andWhere($qb->expr()->between('maf.emissionDate', ':begin', ':end'))
        //     ->setParameter('begin', $begin)
        //     ->setParameter('end', $end);
        
        if ($options->getCreatedAt()) {
            $qb->andWhere($qb->expr()->eq('maf.createdAt', ':createdAt'))->setParameter('createdAt', $options->getCreatedAt());
        } elseif ($options->getDate()) {
             /** @var \DateTime $begin */
            $begin = clone $options->getDate();
            $begin->setTime(0, 0, 0);
            $qb->andWhere($qb->expr()->gte('maf.dateObject', ':date'))->setParameter('date', $begin);
        }

        if (is_array($options->getOrderBy())) {
            foreach ($options->getOrderBy() as $field => $direction) {
                $qb->addOrderBy($field, $direction);
            }
        } else {
            $qb->addOrderBy('maf.dateObject', 'asc');
        }

        if (null !== $options->getLimit()) {
            $qb->setMaxResults($options->getLimit());
        }

        $qb->andWhere($qb->expr()->eq('maf.mine', ':mine'))->setParameter('mine', $options->getMine());

        return $qb;
    }
}
