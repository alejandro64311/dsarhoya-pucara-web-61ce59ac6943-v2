<?php

namespace AppBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use AppBundle\Repository\Options\UserOption;
use AppBundle\Repository\Options\SearchOption;
use dsarhoya\BaseBundle\Entity\BaseUser;
use dsarhoya\BaseBundle\Entity\BaseUserRepository;
use AppBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseUserRepository implements UserLoaderInterface
{
    /**
     * List de operators
     *
     * @param string $role
     * @return QueryBuilder
     */
    public function listUsersQueryBuilder(string $role) : QueryBuilder
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere($qb->expr()->eq('u.state', ':state'))
            ->andWhere($qb->expr()->isNull('u.deletedAt'))
            ->andWhere($qb->expr()->eq('u.role', ':role'))
            ->setParameter('role', $role)
            ->setParameter('state', User::ESTADO_ACTIVO);
        // ->andWhere($qb->expr()->eq('u.accountValidated', ':accountValidated'))
        // ->setParameter('accountValidated', User::ACCOUNT_VALIDATED)
        $qb->orderBy('u.name');

        return $qb;
    }

    /**
     * Get users list array
     *
     * @param array $optionsArray
     * @return array
     */
    public function users(array $optionsArray) : array
    {
        return $this->usersQueryBuilder($optionsArray)->getQuery()->getResult();
    }

    /**
     * List de users QueryBuilder
     *
     * @param array $optionsArray
     * @return QueryBuilder
     */
    public function usersQueryBuilder(array $optionsArray) : QueryBuilder
    {
        $options = new SearchOption($optionsArray);
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere($qb->expr()->isNull('u.deletedAt'));


        if (!empty($options->getCriteria())) {
            $qb->andWhere(
                $qb->expr()->like('u.name', ':criteria')
                // $qb->expr()->orX(
                //     $qb->expr()->like('u.name', ':criteria'),
                //     $qb->expr()->like('u.name', ':criteria')
                // )
            )->setParameter('criteria', "%" . $options->getCriteria() . "%");
        }

        if (null !== $options->getState()) {
            $qb->andWhere($qb->expr()->eq('u.state', ':state'))->setParameter('state', $options->getState());
        }
        if (null !== $options->getRole()) {
            $qb->andWhere($qb->expr()->eq('u.role', ':role'))->setParameter('role', $options->getRole());
        }
        if (null !== $options->getAccountValidated()) {
            $qb->andWhere($qb->expr()->eq('u.accountValidated', ':accountValidated'))
                ->setParameter('accountValidated', $options->getAccountValidated());
        }

        $qb->orderBy('u.name');

        return $qb;
    }

    /**
     * static List de admins
     *
     * @return QueryBuilder
     */
    public static function listAdminsQueryBuilder(UserRepository $repository) : QueryBuilder
    {
        return $repository->listUsersQueryBuilder(User::ROLE_ADMIN);
    }

    /**
     * otherAdminUser function
     *
     * @param BaseUser $user
     * @param string $user_class
     * @return boolean
     */
    public function otherAdminUser(BaseUser $user, $user_class)
    {
        $qb = $this->createQueryBuilder('qb');
        $qb
            ->add('select', 'COUNT(u)')
            ->add('from', "$user_class u")
            ->leftJoin('u.profile', 'p')
            ->andWhere($qb->expr()->andX(
                $qb->expr()->neq('u.id', ':userId'),
                $qb->expr()->isNull('u.deletedAt'),
                $qb->expr()->eq('u.company', ':company'),
                $qb->expr()->eq('u.state', ':state'),
                $qb->expr()->eq('u.accountValidated', ':validated'),
                $qb->expr()->eq('p.isAdmin', ':isAdmin')
            ))->setParameters([
                'userId' => $user->getId(),
                'company' => $user->getCompany()->getId(),
                'isAdmin' => true,
                'state' => User::ESTADO_ACTIVO,
                'validated' => User::ACCOUNT_VALIDATED
            ]);

        return $qb->getQuery()->getSingleScalarResult() > 0;
    }

    /**
     * user to inactivate
     *
     * @param array $optionsArray
     * @return array
     */
    public function usersToInactivate(array $optionsArray) : array
    {
        $options = new UserOption($optionsArray);

        $qb = $this->createQueryBuilder('u');
        $qb->innerJoin('u.company', 'c', 'WITH', 'c.deletedAt IS NULL AND c.state = 1');

        if (null !== $options->getRole()) {
            $qb
                ->andWhere($qb->expr()->eq('u.role', ':role'))
                ->setParameter('role', $options->getRole());
        }

        if (is_array($options->getExcludeIds()) && count($options->getExcludeIds()) > 0) {
            $qb->andWhere($qb->expr()->notIn('u.id', ':excludeIds'))
                ->setParameter('excludeIds', $options->getExcludeIds());
            return $qb->getQuery()->getResult();
        }

        return [];
    }

    /**
     * Get unique code
     *
     * @return array
     */
    public function getNotDeleted(array $criteria)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where($qb->expr()->isNull('u.deletedAt'));
        foreach ($criteria as $field => $value) {
            $qb
                ->andWhere($qb->expr()->eq('u.' . $field, ':' . $field . '_value'))
                ->setParameter($field . '_value', $value);
        }
        // dump($qb->getQuery()->getSQL());
        // die;
        return $qb->getQuery()->getResult();
    }
}
